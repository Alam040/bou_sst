{"version":3,"file":"static/js/199.6737b17a.chunk.js","mappings":"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","sources":["components/assets/MarksEntry/ImportStudent.jsx"],"sourcesContent":["import * as React from \"react\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\n// import CloseIcon from \"@mui/icons-material/Close\";\r\nimport Slide from \"@mui/material/Slide\";\r\nimport { IoClose } from \"react-icons/io5\";\r\nimport styled from \"styled-components\";\r\nimport upload from \"../../images/cloud-computing.png\";\r\nimport sample from \"../../images/file (1).png\";\r\nimport individualImg from \"../../images/graduation-hat.png\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport url from \"../../download/Add All Students.xlsx\";\r\nimport useAxios from \"../../../api/Axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setReload } from \"../../../reduxjs/ReloadSlice\";\r\n\r\nconst AddIndividual = React.lazy(() => import(\"./AddIndividual\"));\r\nconst ImportDocument = React.lazy(() => import(\"./ImportDocument\"));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function ImportStudents({ openBox, setOpenBox, classInfo }) {\r\n  const axios = useAxios();\r\n  const dispatch = useDispatch();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows, setRows] = React.useState([]);\r\n  const [xlFile, setXlFile] = React.useState();\r\n  const [isImport, setIsImport] = React.useState(false);\r\n  const [isIndividual, setIsIndivisual] = React.useState(false);\r\n  const [array, setArray] = React.useState([]);\r\n  React.useEffect(() => {\r\n    setOpen(openBox);\r\n  }, [openBox]);\r\n\r\n  //   const handleClickOpen = () => {\r\n  //     setOpen(true);\r\n  //   };\r\n\r\n  const handleClose = () => {\r\n    dispatch(setReload());\r\n    setOpenBox(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const file = e.target.files[0];\r\n    setXlFile(file);\r\n    readXlsxFile(file)\r\n      .then((row) => {\r\n        setRows(row);\r\n        let dataArray = [];\r\n        const Arr = row;\r\n        for (let i = 1; i < Arr.length; i++) {\r\n          let objArr = [\r\n            `default`,\r\n            Arr[i][0],\r\n            `${Arr[i][1]}`,\r\n            Number(classInfo.classId),\r\n            classInfo.year,\r\n            classInfo.semester,\r\n            `${classInfo.courseName}`,\r\n            classInfo.term,\r\n          ];\r\n          dataArray.push(objArr);\r\n        }\r\n        setArray(dataArray);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const url = \"/import/students\";\r\n      await axios\r\n        .post(url, { data: array })\r\n        .then((res) => {\r\n          handleSuccess(res.data);\r\n          setArray([]);\r\n          setRows([]);\r\n          setXlFile(\"\");\r\n          setIsImport(false);\r\n        })\r\n        .catch((err) => {\r\n          handleError(err.message);\r\n        });\r\n    } catch (error) {\r\n      handleError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleSuccess = (msg) => {\r\n    toast.success(msg, {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n  };\r\n\r\n  const handleError = (msg) => {\r\n    toast.error(msg, {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        {/**\r\n         * Top Tools Bar\r\n         */}\r\n        <ToolsBar handleClose={handleClose} classInfo={classInfo} />\r\n\r\n        <ImportPanel>\r\n          {!isImport && !isIndividual ? (\r\n            <ActionContainer\r\n              setIsImport={setIsImport}\r\n              upload={upload}\r\n              sample={sample}\r\n              setIsIndivisual={setIsIndivisual}\r\n            />\r\n          ) : (\r\n            <React.Fragment>\r\n              {isImport && (\r\n                <ImportDocument\r\n                  rows={rows}\r\n                  xlFile={xlFile}\r\n                  setRows={setRows}\r\n                  setArray={setArray}\r\n                  handleChange={handleChange}\r\n                  setIsImport={setIsImport}\r\n                  handleSubmit={handleSubmit}\r\n                  array={array}\r\n                />\r\n              )}\r\n              {isIndividual && (\r\n                <AddIndividual\r\n                  classInfo={classInfo}\r\n                  setIsIndivisual={setIsIndivisual}\r\n                  isIndividual={isIndividual}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          )}\r\n        </ImportPanel>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ToolsBar({ handleClose, classInfo }) {\r\n  return (\r\n    <AppBar\r\n      sx={{\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          onClick={handleClose}\r\n          aria-label=\"close\"\r\n        >\r\n          <IoClose />\r\n        </IconButton>\r\n        <Typography\r\n          sx={{\r\n            ml: 2,\r\n            flex: 1,\r\n          }}\r\n          variant=\"h6\"\r\n          component=\"div\"\r\n        >\r\n          Add Students\r\n        </Typography>\r\n        {/* <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n       save\r\n      </Button> */}\r\n        <p\r\n          className=\"courseTitle\"\r\n          style={{\r\n            marginBottom: \"0\",\r\n          }}\r\n        >\r\n          {classInfo.courseName + \" - Term: \" + classInfo.term}\r\n        </p>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nfunction ActionContainer({ setIsImport, upload, sample, setIsIndivisual }) {\r\n  const handleDownload = () => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.setAttribute(\r\n      \"download\",\r\n      `Import_Student_Name_Sample_File_${Date.now()}.xlsx`\r\n    ); //set the attribute of the <a> link tag to be downloadable when clicked and name the sheet based on the date and time right now.\r\n\r\n    document.body.appendChild(link);\r\n    link.click(); //programmatically click the link so the user doesn't have to\r\n\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url); //important for optimization and preventing memory leak even though link element has already been removed.\r\n  };\r\n  return (\r\n    <ActionPanel>\r\n      <Title>Choose Option</Title>\r\n      <ButtonPanelGrid>\r\n        <GridButton onClick={() => setIsImport(true)}>\r\n          <Image src={upload} alt=\"Import File\" />\r\n          <Text>Import Document(xlsx)</Text>\r\n        </GridButton>\r\n        <GridButton onClick={() => setIsImport(true)}>\r\n          <Image src={upload} alt=\"Import File\" />\r\n          <Text>Import from Another Class</Text>\r\n        </GridButton>\r\n        <GridButton onClick={() => setIsIndivisual(true)}>\r\n          <Image src={individualImg} alt=\"Import File\" />\r\n          <Text>Add Student Individually</Text>\r\n        </GridButton>\r\n        <GridButton onClick={handleDownload}>\r\n          <Image src={sample} alt=\"Sample File\" />\r\n          <Text>Download Sample File</Text>\r\n        </GridButton>\r\n      </ButtonPanelGrid>\r\n    </ActionPanel>\r\n  );\r\n}\r\n\r\nconst ImportPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 100%;\r\n  margin-top: 0.5rem;\r\n`;\r\nconst ActionPanel = styled.div`\r\n  width: 550px;\r\n  height: 300px;\r\n  border-radius: 5px;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  @media (max-width: 560px) {\r\n    width: 95%;\r\n  }\r\n`;\r\nconst ButtonPanelGrid = styled.div`\r\n  display: flex;\r\n  align-items: stretch;\r\n  justify-items: stretch;\r\n  padding: 1rem;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\nconst GridButton = styled.div`\r\n  width: 130px;\r\n  height: 150px;\r\n  cursor: pointer;\r\n  margin: 1rem;\r\n  overflow: hidden;\r\n  border: 1px solid rgba(3, 3, 3, 0.3);\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 40%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n  text-align: center;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  text-align: center;\r\n  margin-bottom: 0;\r\n  margin-top: 5px;\r\n  font-size: 0.9rem;\r\n`;\r\n"],"names":["AddIndividual","React","ImportDocument","Transition","props","ref","Slide","direction","ImportStudents","openBox","setOpenBox","classInfo","axios","useAxios","dispatch","useDispatch","open","setOpen","rows","setRows","xlFile","setXlFile","isImport","setIsImport","isIndividual","setIsIndivisual","array","setArray","handleClose","setReload","handleSubmit","post","data","then","res","handleSuccess","catch","err","handleError","message","msg","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","Dialog","fullScreen","onClose","TransitionComponent","ToolsBar","ImportPanel","handleChange","e","file","target","files","readXlsxFile","row","dataArray","Arr","i","length","objArr","Number","classId","year","semester","courseName","term","push","console","log","ActionContainer","upload","sample","AppBar","sx","Toolbar","IconButton","edge","color","onClick","Typography","ml","flex","variant","component","className","style","marginBottom","ActionPanel","Title","ButtonPanelGrid","GridButton","Image","src","alt","Text","individualImg","link","document","createElement","href","url","setAttribute","Date","now","body","appendChild","click","removeChild","URL","revokeObjectURL","styled"],"sourceRoot":""}