{"version":3,"file":"static/js/670.5ffa4ab5.chunk.js","mappings":"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","sources":["components/assets/TableForMarks.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { CiViewList } from \"react-icons/ci\";\r\nimport { MdDeleteOutline, MdEditNote } from \"react-icons/md\";\r\nimport styled from \"styled-components\";\r\nimport useAxios from \"../../api/Axios\";\r\nimport loadingImg from \"../images/1_CsJ05WEGfunYMLGfsT2sXA.gif\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setViewData } from \"../../reduxjs/ViewInfoSlice\";\r\nimport { useMarksEntry } from \"../../Context/MarksEntry\";\r\nimport {\r\n  TiArrowSortedDown,\r\n  TiArrowSortedUp,\r\n  TiArrowUnsorted,\r\n} from \"react-icons/ti\";\r\nimport { useAddStudent } from \"../../Context/AddStudent\";\r\n\r\nconst TableForMarks = ({ classInfo }) => {\r\n  const axios = useAxios();\r\n  const marks = useMarksEntry();\r\n  const students = useAddStudent();\r\n  const [student, setStudent] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(true);\r\n  React.useEffect(() => {\r\n    getAllStudent();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [axios, marks.classInfo, marks.search, marks.sortTable.order]);\r\n\r\n  window.addEventListener(\"load\", () => {\r\n    getAllStudent();\r\n  });\r\n  const getAllStudent = async () => {\r\n    const url = \"/student/all?id=\" + classInfo.classId;\r\n    await axios.get(url).then((res) => {\r\n      setStudent(res.data);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Loading>\r\n          <Image src={loadingImg} alt=\"Loading...\" />\r\n        </Loading>\r\n      ) : (\r\n        <React.Fragment>\r\n          <Table width=\"100%\">\r\n            <THead>\r\n              <TableHead classInfo />\r\n            </THead>\r\n            <TBody>\r\n              {student.length > 0 ? (\r\n                student\r\n                  .sort((a, b) => {\r\n                    const order = marks.sortTable.order;\r\n                    const field = marks.sortTable.field;\r\n                    if (order === \"\") {\r\n                      return a;\r\n                    } else {\r\n                      if (order === \"asc\") {\r\n                        return a[field] > b[field] ? 1 : -1;\r\n                      } else {\r\n                        return a[field] > b[field] ? -1 : 1;\r\n                      }\r\n                    }\r\n                  })\r\n                  .filter((data) => {\r\n                    if (marks.search !== \"\") {\r\n                      if (\r\n                        Object.values(data)\r\n                          .toString()\r\n                          .toLocaleLowerCase()\r\n                          .includes(marks.search.toString().toLowerCase())\r\n                      ) {\r\n                        return data;\r\n                      }\r\n                      return null;\r\n                    } else {\r\n                      return data;\r\n                    }\r\n                  })\r\n                  .map((data) => {\r\n                    return (\r\n                      <TableBodyRows\r\n                        key={data.id}\r\n                        data={data}\r\n                        classInfo={classInfo}\r\n                      />\r\n                    );\r\n                  })\r\n              ) : (\r\n                <TRow>\r\n                  <TData colSpan=\"12\">\r\n                    <NoDataPanel>\r\n                      <NoRecImage src={require(\"../images/empty_item.png\")} />\r\n                      <Text>No Record Found.</Text>\r\n                      <Text>Please Import Students First.</Text>\r\n                      <Button onClick={() => students.handleOpen(true)}>\r\n                        Import Student\r\n                      </Button>\r\n                    </NoDataPanel>\r\n                  </TData>\r\n                </TRow>\r\n              )}\r\n            </TBody>\r\n          </Table>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableForMarks;\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n  padding: 1px;\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n  border-color: gray;\r\n`;\r\n\r\nconst THead = styled.thead``;\r\n\r\nconst TBody = styled.tbody``;\r\n\r\nconst TRow = styled.tr``;\r\n\r\nconst TData = styled.td`\r\n  border: 1px solid rgba(3, 3, 3, 0.3);\r\n  padding: 0.3rem 0.5rem;\r\n  &:nth-child(n + 4) {\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst TH = styled.th`\r\n  border: 1px solid rgba(3, 3, 3, 0.4);\r\n  padding: 0.3rem 0.5rem;\r\n  font-size: 0.8rem;\r\n  text-align: center;\r\n  font-weight: 600;\r\n  min-width: 75px;\r\n`;\r\n\r\nconst IconPanel = styled.div`\r\n  display: flex;\r\n  justify-items: stretch;\r\n  align-items: stretch;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n  width: 25px;\r\n  height: auto;\r\n  font-size: 1.1rem;\r\n  margin: 0 0.2rem;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n\r\n  &:hover {\r\n    background: rgba(230, 230, 230, 0.8);\r\n  }\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  width: 100%;\r\n  height: 55vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 200px;\r\n  height: auto;\r\n  border-radius: 5px;\r\n`;\r\n\r\nfunction TableBodyRows({ data }) {\r\n  const dispatch = useDispatch();\r\n  const marks = useMarksEntry();\r\n  return (\r\n    <TRow key={data.id}>\r\n      <TData>{data.stuId}</TData>\r\n      <TData style={{ whiteSpace: \"nowrap\" }}>{data.stuName}</TData>\r\n      <TData style={{ textAlign: \"center\" }}>{data.attendance}</TData>\r\n      {marks.classInfo.courseType === \"Lab\" ? (\r\n        <TData>{data.labPerform}</TData>\r\n      ) : null}\r\n      <TData>{data.assign1}</TData>\r\n      <TData>{data.assign2}</TData>\r\n      <TData>{data.assign3}</TData>\r\n      <TData>{data.average}</TData>\r\n      <TData>{data.test1}</TData>\r\n      <TData>{data.test2}</TData>\r\n      <TData>{data.best}</TData>\r\n      <TData>{data.total}</TData>\r\n      <TData>\r\n        <IconPanel>\r\n          <Icon\r\n            onClick={() => {\r\n              dispatch(setViewData({ id: data.id }));\r\n            }}\r\n          >\r\n            <CiViewList />\r\n          </Icon>\r\n          <Icon>\r\n            <MdEditNote />\r\n          </Icon>\r\n          <Icon>\r\n            <MdDeleteOutline />\r\n          </Icon>\r\n        </IconPanel>\r\n      </TData>\r\n    </TRow>\r\n  );\r\n}\r\n\r\nconst TableHead = ({ classInfo }) => {\r\n  const marks = useMarksEntry();\r\n\r\n  const handleSortField = (field) => {\r\n    const order = marks.sortTable.order;\r\n    if (order === \"desc\") {\r\n      marks.handleSort({ order: \"asc\", field });\r\n    } else {\r\n      marks.handleSort({ order: \"desc\", field });\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <TRow>\r\n        <TH\r\n          rowSpan=\"2\"\r\n          style={{ cursor: \"pointer\", width: \"100px\" }}\r\n          onClick={() => handleSortField(\"stuId\")}\r\n        >\r\n          Student ID <SortIcon field={\"stuId\"} />\r\n        </TH>\r\n        <TH rowSpan=\"2\">Student Name</TH>\r\n        <TH\r\n          rowSpan=\"2\"\r\n          style={{ cursor: \"pointer\", width: \"100px\" }}\r\n          onClick={() => handleSortField(\"attendance\")}\r\n        >\r\n          Class Attendance ({classInfo.courseType === \"Lab\" ? 10 : 5}){\" \"}\r\n          <SortIcon field={\"attendance\"} />\r\n        </TH>\r\n        {/**\r\n         * Lab Performance\r\n         */}\r\n        {classInfo.courseType === \"Lab\" ? (\r\n          <TH\r\n            rowSpan=\"2\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => handleSortField(\"labPerform\")}\r\n          >\r\n            Lab Performance(10) <SortIcon field={\"labPerform\"} />\r\n          </TH>\r\n        ) : null}\r\n        <TH colSpan=\"4\">Assignment/Case Study (10)</TH>\r\n        <TH colSpan=\"3\">\r\n          Quizzes/Class Test ({classInfo.courseType === \"Lab\" ? 10 : 15})\r\n        </TH>\r\n        {/**\r\n         * Total CA Marks\r\n         */}\r\n        <TH\r\n          rowSpan=\"2\"\r\n          style={{ cursor: \"pointer\", whiteSpace: \"nowrap\" }}\r\n          onClick={() => handleSortField(\"total\")}\r\n        >\r\n          Total ({classInfo.courseType === \"Lab\" ? 40 : 30}){\" \"}\r\n          <SortIcon field={\"total\"} />\r\n        </TH>\r\n        <TH rowSpan=\"2\">Action</TH>\r\n      </TRow>\r\n      <TRow>\r\n        <TH>Assign-1</TH>\r\n        <TH>Assign-2</TH>\r\n        <TH>Assign-3</TH>\r\n        {/**\r\n         * Average Assignment Marks\r\n         */}\r\n        <TH\r\n          style={{ cursor: \"pointer\", whiteSpace: \"nowrap\" }}\r\n          onClick={() => handleSortField(\"average\")}\r\n        >\r\n          Average <SortIcon field={\"average\"} />\r\n        </TH>\r\n        <TH>Test-1</TH>\r\n        <TH>Test-2</TH>\r\n        {/**\r\n         * Best of Quizz/Test Marks\r\n         */}\r\n        <TH\r\n          style={{ cursor: \"pointer\", whiteSpace: \"nowrap\" }}\r\n          onClick={() => handleSortField(\"best\")}\r\n        >\r\n          Best <SortIcon field={\"best\"} />\r\n        </TH>\r\n      </TRow>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst SortIcon = ({ field }) => {\r\n  const marks = useMarksEntry();\r\n  if (marks.sortTable.order !== \"\" && marks.sortTable.field === field) {\r\n    if (marks.sortTable.order === \"asc\") {\r\n      return <TiArrowSortedDown />;\r\n    } else return <TiArrowSortedUp />;\r\n  } else {\r\n    return <TiArrowUnsorted />;\r\n  }\r\n};\r\n\r\nconst NoDataPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding: 1rem;\r\n`;\r\nconst NoRecImage = styled.img`\r\n  width: 150px;\r\n  height: auto;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  min-width: 120px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  font-weight: 500;\r\n  background: rgba(0, 125, 0, 1);\r\n`;\r\n\r\nconst Text = styled.p`\r\n  &:nth-child(2) {\r\n    margin-bottom: 0;\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n"],"names":["classInfo","axios","useAxios","marks","useMarksEntry","students","useAddStudent","React","student","setStudent","loading","setLoading","getAllStudent","search","sortTable","order","window","addEventListener","url","classId","get","then","res","data","Loading","Image","src","loadingImg","alt","Table","width","THead","TableHead","TBody","length","sort","a","b","field","filter","Object","values","toString","toLocaleLowerCase","includes","toLowerCase","map","TableBodyRows","id","TRow","TData","colSpan","NoDataPanel","NoRecImage","require","Text","Button","onClick","handleOpen","styled","TH","IconPanel","Icon","dispatch","useDispatch","stuId","style","whiteSpace","stuName","textAlign","attendance","courseType","labPerform","assign1","assign2","assign3","average","test1","test2","best","total","setViewData","handleSortField","handleSort","rowSpan","cursor","SortIcon"],"sourceRoot":""}